{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","this","handleRequestRobots","searchField","robots","isPending","filteredMonsters","filter","toLowerCase","includes","style","textAlign","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","data","json","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fbb2af2.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    <img \n      alt='monster'\n      className='card__image'\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n    />\n    <h2> {props.monster.name} </h2>\n    <p> {props.monster.email} </p>\n  </div>\n)","import React from 'react';\n\nimport { Card } from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n)","import React from 'react';\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className='search'\n    type=\"search\" \n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nimport './App.css';\n\nimport { setSearchField, requestRobots } from './actions.js'\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleChange: (event) => dispatch(setSearchField(event.target.value)),\n    handleRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.handleRequestRobots()\n  }\n\n  render(){\n    const { searchField, handleChange, robots, isPending } = this.props\n    const filteredMonsters = robots.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    if (isPending) {\n      return (\n        <h1 style={{textAlign: \"center\"}}>Please wait</h1>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n          <SearchBox\n            placeholder='search monsters'\n            handleChange={handleChange}\n          />\n          <CardList monsters={filteredMonsters} />\n        </div>\n      )\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(data => data.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS , payload: data}))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false})\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}